// Fontsize
//----------------------------------------
@mixin font-size($font-size: 16) {
  font-size: #{$font-size}px;
  font-size: #{$font-size / 10}rem;
}

@mixin line-height($line-height: 16) {
  line-height: #{$line-height}px;
  line-height: #{$line-height / 10}rem;
}

// Clearfix
//----------------------------------------
@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

// Vertically center content block in relatively
// positioned parent
//----------------------------------------
@mixin vertical-center() {
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -moz-transform: translateY(-50%);
  transform: translateY(-50%);
}

// Rem units
// =====================================================================
// Taken from: http://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/
// Usage: @include rem(padding, 20px 10px);
// Baseline is set to html font-size value of 10px.
// =====================================================================
@function parseint($n) {
  @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
  $px: ();
  $rem: ();

  @each $value in $values {

    @if $value == 0 or $value == auto {
      $px: append($px, $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);
      $val: parseint($value);

      @if $unit == "px" {
        $px: append($px, $value);
        $rem: append($rem, ($val / $baseline + rem));
      }

      @if $unit == "rem" {
        $px: append($px, ($val * $baseline + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {
    #{$property}: $px;
  }

  @else {
    #{$property}: $px;
    #{$property}: $rem;
  }
}


// Optimised Encoded SVGs
// =====================================================================
// Taken from: http://codepen.io/jakob-e/pen/doMoML
// Further reading: https://codepen.io/tigt/post/optimizing-svgs-in-data-uris
// =====================================================================

//  Function to replace characters in a string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

//  Function to create an optimized svg url
//  (may need a few extra replacements)
@function svg-url($svg) {

  // Remove invalid utf-8 param generated by sass-inline-image function
  $svg: str-replace($svg, ';utf8');

  // Chunk up string in order to avoid
  // "SystemStackError: stack level too deep"
  $encoded:'';
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg) / $slice);

  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    $chunk: str-replace($chunk, '"', '\'');
    $chunk: str-replace($chunk, '<', '%3C');
    $chunk: str-replace($chunk, '>', '%3E');
    $chunk: str-replace($chunk, '&', '%26');
    $chunk: str-replace($chunk, '#', '%23');
    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }

  @return url("#{$encoded}");
}
